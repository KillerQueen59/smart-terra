{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/fauzanramadhan/Ojan/smart-terra/src/lib/supabase-clients.ts"],"sourcesContent":["import { createBrowserClient } from \"@supabase/ssr\";\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\n// Client-side Supabase client for browser components\nexport function createClientComponentClient() {\n  console.log(\"Creating Supabase client with URL:\", supabaseUrl);\n\n  return createBrowserClient(supabaseUrl, supabaseAnonKey);\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM;AACN,MAAM;AAGC,SAAS;IACd,QAAQ,GAAG,CAAC,sCAAsC;IAElD,OAAO,IAAA,iMAAmB,EAAC,aAAa;AAC1C","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/fauzanramadhan/Ojan/smart-terra/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { User, Session, AuthError } from \"@supabase/supabase-js\";\nimport { createClientComponentClient } from \"@/lib/supabase-clients\";\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (\n    email: string,\n    password: string\n  ) => Promise<{ error: AuthError | null }>;\n  signUp: (\n    email: string,\n    password: string\n  ) => Promise<{ error: AuthError | null }>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const supabase = createClientComponentClient();\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [supabase.auth]);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    return { error };\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    return { error };\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AAEA;AAJA;;;;AAqBA,MAAM,4BAAc,IAAA,sNAAa,EAA8B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAc;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAiB;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,WAAW,IAAA,gKAA2B;IAE5C,IAAA,kNAAS,EAAC;QACR,sBAAsB;QACtB,MAAM,oBAAoB;YACxB,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;YAClC,WAAW;YACX,QAAQ,SAAS,QAAQ;YACzB,WAAW;QACb;QAEA;QAEA,0BAA0B;QAC1B,MAAM,EACJ,MAAM,EAAE,YAAY,EAAE,EACvB,GAAG,SAAS,IAAI,CAAC,iBAAiB,CAAC,OAAO,OAAO;YAChD,WAAW;YACX,QAAQ,SAAS,QAAQ;YACzB,WAAW;QACb;QAEA,OAAO,IAAM,aAAa,WAAW;IACvC,GAAG;QAAC,SAAS,IAAI;KAAC;IAElB,MAAM,SAAS,OAAO,OAAe;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;YACvD;YACA;QACF;QAEA,OAAO;YAAE;QAAM;IACjB;IAEA,MAAM,SAAS,OAAO,OAAe;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;YAC3C;YACA;QACF;QAEA,OAAO;YAAE;QAAM;IACjB;IAEA,MAAM,UAAU;QACd,MAAM,SAAS,IAAI,CAAC,OAAO;IAC7B;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAEO,SAAS;IACd,MAAM,UAAU,IAAA,mNAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/fauzanramadhan/Ojan/smart-terra/src/components/Providers.tsx"],"sourcesContent":["\"use client\";\n\nimport { AuthProvider } from \"@/contexts/AuthContext\";\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return <AuthProvider>{children}</AuthProvider>;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBAAO,8OAAC,+IAAY;kBAAE;;;;;;AACxB","debugId":null}}]
}